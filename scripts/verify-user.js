// =====================================================
// Script para Verificar Usu√°rio e Hash do PIN
// =====================================================

require('dotenv').config();
const bcrypt = require('bcryptjs');
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Erro: Vari√°veis de ambiente n√£o encontradas!');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function verifyUser() {
  try {
    const matricula = 'ANDRE001';
    const pinToTest = '123456';

    console.log('üîç Buscando usu√°rio ANDRE001...\n');

    // 1. Buscar usu√°rio
    const { data: user, error: findError } = await supabase
      .from('users')
      .select('*')
      .eq('matricula', matricula)
      .maybeSingle();

    if (findError) {
      console.error('‚ùå Erro ao buscar usu√°rio:', findError);
      process.exit(1);
    }

    if (!user) {
      console.error('‚ùå Usu√°rio n√£o encontrado!');
      process.exit(1);
    }

    // 2. Mostrar dados do usu√°rio
    console.log('üìã DADOS DO USU√ÅRIO:');
    console.log('   - ID:', user.id);
    console.log('   - Nome:', user.nome);
    console.log('   - Matr√≠cula:', user.matricula);
    console.log('   - Email:', user.email);
    console.log('   - Perfil:', user.perfil);
    console.log('   - Ativo:', user.ativo);
    console.log('   - PIN Hash:', user.pin_hash);
    console.log('   - PIN Hash Length:', user.pin_hash ? user.pin_hash.length : 'NULL');

    // 3. Testar hash do PIN
    console.log('\nüîê TESTANDO HASH DO PIN...');
    console.log('   - PIN a testar:', pinToTest);

    if (!user.pin_hash) {
      console.error('‚ùå PIN hash est√° NULL no banco!');
      process.exit(1);
    }

    const isValid = await bcrypt.compare(pinToTest, user.pin_hash);

    console.log('   - bcrypt.compare resultado:', isValid);

    if (isValid) {
      console.log('\n‚úÖ PIN EST√Å CORRETO! O hash est√° funcionando.');
    } else {
      console.log('\n‚ùå PIN N√ÉO CONFERE! O hash n√£o est√° correto.');

      // Gerar novo hash para compara√ß√£o
      console.log('\nüîß Gerando novo hash para o PIN 123456...');
      const newHash = await bcrypt.hash(pinToTest, 10);
      console.log('   - Novo hash gerado:', newHash);
      console.log('   - Hash atual no banco:', user.pin_hash);

      // Testar novo hash
      const newHashTest = await bcrypt.compare(pinToTest, newHash);
      console.log('   - Teste com novo hash:', newHashTest);
    }

    // 4. Verificar se est√° ativo
    console.log('\nüë§ VERIFICA√á√ïES ADICIONAIS:');
    console.log('   - Usu√°rio ativo?', user.ativo ? '‚úÖ SIM' : '‚ùå N√ÉO');
    console.log('   - Perfil:', user.perfil);

  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    console.error(error);
    process.exit(1);
  }
}

verifyUser()
  .then(() => {
    console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Erro fatal:', error);
    process.exit(1);
  });
